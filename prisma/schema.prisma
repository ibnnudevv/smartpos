generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Cabang {
  id        String   @id @default(uuid())
  nama      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)

  User            User[]
  Stok            Stok[]
  detailTransaksi DetailTransaksi[]
  LogBarang       LogBarang[]
}

model User {
  id             String            @id @default(uuid())
  nama           String
  username       String            @unique
  email          String?           @unique
  password       String
  cabangId       String
  cabang         Cabang            @relation(fields: [cabangId], references: [id])
  role           Role
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  Transaksi      Transaksi[]
  createdDetails DetailTransaksi[] @relation("createdBy")
  createdLogs    LogBarang[]       @relation("createdBy")
  isActive       Boolean           @default(true)
}

model Barang {
  id        String   @id @default(uuid())
  kode      String   @unique // ex: BRG-001
  nama      String
  harga     Int
  diskon    Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)

  Stok             Stok[]
  DetailTransaksi  DetailTransaksi[]
  LogBarang        LogBarang[]
  KategoriBarang   KategoriBarang    @relation(fields: [kategoriBarangId], references: [id])
  kategoriBarangId String
}

model KategoriBarang {
  id        String   @id @default(uuid())
  nama      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)

  Barang Barang[]
}

model Stok {
  id        String   @id @default(uuid())
  barangId  String
  barang    Barang   @relation(fields: [barangId], references: [id])
  cabangId  String
  cabang    Cabang   @relation(fields: [cabangId], references: [id])
  jumlah    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
}

model Transaksi {
  id        String   @id @default(uuid())
  kode      String   @unique // ex: TRX-001
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  subTotal  Int?
  diskon    Int?
  total     Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)

  DetailTransaksi DetailTransaksi[]
}

model DetailTransaksi {
  id          String    @id @default(uuid())
  transaksi   Transaksi @relation(fields: [transaksiId], references: [id])
  cabang      Cabang    @relation(fields: [cabangId], references: [id])
  cabangId    String
  transaksiId String
  barang      Barang    @relation(fields: [barangId], references: [id])
  barangId    String
  jumlah      Int
  harga       Int
  diskon      Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)

  createdUser   User   @relation("createdBy", fields: [createdUserId], references: [id])
  createdUserId String
}

// model untuk pencatatan barang masuk, barang keluar, dan stok barang
model LogBarang {
  id       String         @id @default(uuid())
  barangId String
  barang   Barang         @relation(fields: [barangId], references: [id])
  cabangId String
  cabang   Cabang         @relation(fields: [cabangId], references: [id])
  jumlah   Int
  jenis    JenisLogBarang

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)

  createdUser   User?   @relation("createdBy", fields: [createdUserId], references: [id])
  createdUserId String?
}

enum JenisLogBarang {
  MASUK
  KELUAR
  PENJUALAN
}

enum Role {
  KASIR
  ADMIN_CABANG
}
